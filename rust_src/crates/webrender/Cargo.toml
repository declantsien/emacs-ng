[package]
name = "wrterm"
version = "0.1.0"
edition = "2021"
build = "build.rs"

[lib]
path = "src/lib.rs"

[dependencies]
emacs = { path = "../emacs" }
lisp-macros = { path = "../lisp_macros" }
lisp-util = {  path = "../lisp_util" }
colors = {  path = "../../../etc/colors" }
log = "0.4.17"
libc = "0.2.95"
lazy_static = "1.4"
gleam = "0.13"
copypasta = { version = "0.10", default-features = false, optional = true }
image_ = { package = "image", version = "0.24" }
app_units = "0.7"
bit-vec = "0.6.3"
ttf-parser = "0.17"
once_cell = "1.16.0"
tokio = { version = "1.23", features = ["rt-multi-thread", "sync", "net", "macros", "time"], optional = true }
futures = "0.3"
winit = { version = "0.29", default-features = false, optional = true, features = ["rwh_05"]}
tao = { version = "0.25", default-features = false, optional = true, features = ["rwh_05"] }
fontdb = "0.12"
raw-window-handle = "0.5"
errno.workspace = true
euclid = "0.22"
# NOTE: the sm-angle feature only enables angle on windows, not other platforms!
surfman = { version = "0.9", features = ["chains", "sm-angle", "sm-angle-default"] , optional = true}
glutin = { version = "0.31", optional = true }
rustybuzz = "0.6"
ouroboros = "0.15.5"
resvg = "0.29"
usvg = "0.29"
usvg-text-layout = "0.29"
tiny-skia = "0.8"
parking_lot = "0.12"
arboard = { version = "3.3", optional = true }

[dependencies.nix]
optional = true
version = "0.26"
default-features = false
features = ["signal"]

# Cargo.lock update patch
[dependencies.webrender]
git = "https://github.com/declantsien/webrender.git"
rev = "1732a483fe19466a4e2834017214ff3e30525f45"
default-features = false

[build-dependencies]
ng-bindgen = { path = "../../ng-bindgen" }
cfg_aliases = "0.2"

[target.'cfg(all(unix, not(target_os = "macos")))'.dependencies]
font-loader = "0.11"
wayland-sys = {version = "0.30", features = ["client", "dlopen"]}
gtk = { workspace = true, optional = true }
gdk = { workspace = true, optional = true }
gtk-sys = { workspace = true, optional = true }
gdk-sys = { workspace = true, optional = true }
gdkwayland-sys = { workspace = true, optional = true }
gdkx11-sys = { workspace = true, optional = true }
x11-dl = { version = "2.21", optional = true }
gl_loader = { version = "0.1.2", optional = true }

[target.'cfg(all(unix, not(target_os = "macos")))'.dependencies.x11]
features = ["xlib"]
version = "2.20"
optional = true

[target.'cfg(target_os = "macos")'.dependencies]
core-foundation = "0.9"

[features]
default = ["std", "wayland", "tokio", "winit", "surfman"]
# pgtk = [
#   "dep:gtk", "dep:gtk-sys", "dep:gdkwayland-sys", "dep:gdkx11-sys", "dep:x11-dl",
#   "std",
#   "wayland",
#   "gtk3", "pgtk",
# ]
# winit=["dep:winit", "dep:copypasta", "emacs/window-system-winit"]
# winit-tao = [
#   "dep:tao", "emacs/window-system-winit",
#   "std",
#   "wayland",
#   "gtk3", "tokio", "x11",
# ]
x11 = ["dep:x11",
  "copypasta?/x11",
  "surfman?/sm-x11",
  "winit?/x11",
  "glutin?/glx",
  "glutin?/x11"
]
wayland = [
  "copypasta?/wayland",
  "arboard?/wayland-data-control",
  "winit?/wayland",
  "winit?/wayland-dlopen",
  "winit?/wayland-csd-adwaita",
  "glutin?/egl",
  "glutin?/wayland"
]
capture=["webrender/capture", "webrender/serialize_program"]
profiling=["webrender/profiler"]
sw_compositor=["webrender/sw_compositor"]
pselect=["dep:nix"]
tokio=["dep:tokio"]
glutin=["dep:glutin"]
surfman=["dep:surfman"]
winit=["dep:winit", "emacs/window-system-winit", "dep:arboard"]
gtk3=["dep:gtk", "dep:gdk", "dep:gl_loader"]
tao=["dep:tao", "emacs/window-system-winit", "dep:arboard"]
pgtk=["dep:gtk", "dep:gtk-sys", "dep:gdkwayland-sys", "dep:gdkx11-sys", "dep:x11-dl"]
no_std = [
  "rustybuzz/libm",
  "usvg-text-layout/system-fonts"
]
std = [
  "fontdb/memmap",
  "fontdb/std",
  "rustybuzz/std",
  "usvg-text-layout/memmap-fonts"
]
